# -*- coding: utf-8 -*-
"""Copia de Naive_Bayes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l8vA734BDde1uQqx4SQ_S-Fj2p4wvABl

# Naive Bayes

## Importar el modelo y demás librerías
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, confusion_matrix

"""## Carga y exploración de datos ##"""

df = pd.read_json("/content/dataset_riesgo_crediticio.json")
df.head()

"""## Preparación de los datos ##"""

X = df.drop('riesgo_crediticio', axis=1)
y = df['riesgo_crediticio']

X_train, X_test, y_train, y_test = train_test_split(
    X,y, test_size=0.2, random_state=42
)

print(f"Datos de entrenamiento X: {X_train.shape} y: {y_train.shape}")
print(f"Datos de prueba X: {X_test.shape} y: {y_test.shape}")

"""## Crear una instancia del modelo"""

modelo = GaussianNB()

"""## Entrenar el modelo con los datos"""

modelo.fit(X_train, y_train)

"""## Realizar predicciones"""

y_pred = modelo.predict(X_test)
print(classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=["Bajo", "Moderado-Bajo", "Moderado-alto", "Alto"],
            yticklabels=["Bajo", "Moderado-bajo", "Moderado-Alto", "Alto"])
plt.xlabel("Predicción")
plt.ylabel("Clase real")
plt.title("Matriz de confusión - Naive Bayes")
plt.show()